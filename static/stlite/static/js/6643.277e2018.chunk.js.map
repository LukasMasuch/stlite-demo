{"version":3,"file":"static/js/6643.277e2018.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/shared/InputInstructions/styled-components.ts","../../../streamlit/frontend/lib/src/components/shared/InputInstructions/InputInstructions.tsx","../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts","../../../streamlit/frontend/lib/src/components/widgets/NumberInput/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/NumberInput/NumberInput.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\nimport { keyframes } from \"@emotion/react\"\n\nconst blink = keyframes`\n  50% {\n    color: rgba(0, 0, 0, 0);\n  }\n`\n\nexport interface StyledMessageProps {\n  includeDot: boolean\n  shouldBlink: boolean\n}\n\nexport const StyledMessage = styled.span<StyledMessageProps>(\n  ({ includeDot, shouldBlink, theme }) => ({\n    ...(includeDot\n      ? {\n          \"&::before\": {\n            opacity: 1,\n            content: '\"•\"',\n            animation: \"none\",\n            color: theme.colors.gray,\n            margin: \"0 5px\",\n          },\n        }\n      : {}),\n    ...(shouldBlink\n      ? {\n          color: theme.colors.red,\n          animationName: `${blink}`,\n          animationDuration: \"0.5s\",\n          animationIterationCount: 5,\n        }\n      : {}),\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport { isFromMac } from \"@streamlit/lib/src/util/utils\"\nimport { StyledWidgetInstructions } from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport { StyledMessage } from \"./styled-components\"\n\nexport interface Props {\n  dirty: boolean\n  value: string\n  maxLength?: number\n  className?: string\n  type?: \"multiline\" | \"single\" | \"chat\"\n  inForm: boolean\n}\n\nconst InputInstructions = ({\n  dirty,\n  value,\n  maxLength,\n  className,\n  type = \"single\",\n  inForm,\n}: Props): ReactElement => {\n  const messages: ReactElement[] = []\n  const addMessage = (text: string, shouldBlink = false): void => {\n    messages.push(\n      <StyledMessage\n        key={messages.length}\n        includeDot={messages.length > 0}\n        shouldBlink={shouldBlink}\n      >\n        {text}\n      </StyledMessage>\n    )\n  }\n\n  if (dirty) {\n    const toSubmitFormOrApplyText = inForm ? \"submit form\" : \"apply\"\n    if (type === \"multiline\") {\n      const commandKey = isFromMac() ? \"⌘\" : \"Ctrl\"\n      addMessage(`Press ${commandKey}+Enter to ${toSubmitFormOrApplyText}`)\n    } else if (type === \"single\") {\n      addMessage(`Press Enter to ${toSubmitFormOrApplyText}`)\n    }\n  }\n\n  if (maxLength && (type !== \"chat\" || dirty)) {\n    addMessage(\n      `${value.length}/${maxLength}`,\n      dirty && value.length >= maxLength\n    )\n  }\n\n  return (\n    <StyledWidgetInstructions\n      data-testid=\"InputInstructions\"\n      className={className}\n    >\n      {messages}\n    </StyledWidgetInstructions>\n  )\n}\n\nexport default InputInstructions\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidFormId } from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { SignalConnection } from \"typed-signals\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      this.formClearListener != null &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nconst CONTROLS_WIDTH = 32 // px\n\nexport const StyledInputContainer = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"nowrap\",\n  alignItems: \"center\",\n\n  // Mimic the baseweb's borders here, so we can apply the focus style\n  // to the entire container and not only the input itself\n  borderWidth: \"1px\",\n  borderStyle: \"solid\",\n  // Mimic the logic from createThemeOverrides.\n  borderColor:\n    theme.colors.widgetBorderColor ||\n    theme.colors.widgetBackgroundColor ||\n    theme.colors.bgColor,\n  transitionDuration: \"200ms\",\n  transitionProperty: \"border\",\n  transitionTimingFunction: \"cubic-bezier(0.2, 0.8, 0.4, 1)\",\n  borderRadius: theme.radii.lg,\n  overflow: \"hidden\", // Fix rounded corner being overlayed with corner of internal input.\n\n  \"&.focused\": {\n    borderColor: theme.colors.primary,\n  },\n\n  input: {\n    MozAppearance: \"textfield\",\n    \"&::-webkit-inner-spin-button, &::-webkit-outer-spin-button\": {\n      WebkitAppearance: \"none\",\n      margin: theme.spacing.none,\n    },\n  },\n}))\n\nexport const StyledInputControls = styled.div({\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignSelf: \"stretch\",\n})\n\nexport const StyledInputControl = styled.button(({ theme }) => ({\n  margin: theme.spacing.none,\n  border: \"none\",\n  height: theme.sizes.full,\n  display: \"flex\",\n  alignItems: \"center\",\n  width: `${CONTROLS_WIDTH}px`,\n  justifyContent: \"center\",\n  color: theme.colors.bodyText,\n  transition: \"color 300ms, backgroundColor 300ms\",\n  // Mimic the logic from createThemeOverrides.\n  backgroundColor:\n    theme.colors.widgetBackgroundColor || theme.colors.secondaryBg,\n  \"&:hover:enabled, &:focus:enabled\": {\n    color: theme.colors.white,\n    backgroundColor: theme.colors.primary,\n    transition: \"none\",\n    outline: \"none\",\n  },\n  \"&:active\": {\n    outline: \"none\",\n    border: \"none\",\n  },\n  \"&:last-of-type\": {\n    borderTopRightRadius: theme.radii.lg,\n    borderBottomRightRadius: theme.radii.lg,\n  },\n  \"&:disabled\": {\n    cursor: \"not-allowed\",\n    color: theme.colors.fadedText40,\n  },\n}))\n\nexport interface StyledInstructionsContainerProps {\n  // If widget is clearable, the instruction needs to be moved a couple\n  // pixels to the left to avoid overlapping with the clear button.\n  clearable: boolean\n}\n\nexport const StyledInstructionsContainer =\n  styled.div<StyledInstructionsContainerProps>(({ theme, clearable }) => ({\n    position: \"absolute\",\n    marginRight: theme.spacing.twoXS,\n    left: 0,\n    right: `${CONTROLS_WIDTH * 2 + (clearable ? 12 : 0)}px`,\n  }))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { Plus, Minus } from \"@emotion-icons/open-iconic\"\nimport { withTheme } from \"@emotion/react\"\nimport { sprintf } from \"sprintf-js\"\n\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport { logWarning } from \"@streamlit/lib/src/util/log\"\nimport { NumberInput as NumberInputProto } from \"@streamlit/lib/src/proto\"\nimport { breakpoints } from \"@streamlit/lib/src/theme/primitives/breakpoints\"\nimport {\n  WidgetStateManager,\n  Source,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport { Input as UIInput } from \"baseui/input\"\nimport InputInstructions from \"@streamlit/lib/src/components/shared/InputInstructions/InputInstructions\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelp,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport {\n  isInForm,\n  labelVisibilityProtoValueToEnum,\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  StyledInputContainer,\n  StyledInputControl,\n  StyledInputControls,\n  StyledInstructionsContainer,\n} from \"./styled-components\"\n\nexport interface Props {\n  disabled: boolean\n  element: NumberInputProto\n  widgetMgr: WidgetStateManager\n  width: number\n  theme: EmotionTheme\n}\n\nexport interface State {\n  /**\n   * True if the user-specified state.value has not yet been synced to the WidgetStateManager.\n   */\n  dirty: boolean\n\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: number | null\n\n  /**\n   * The value with applied format that is going to be shown to the user\n   */\n  formattedValue: string | null\n\n  /**\n   * True if the input is selected\n   */\n  isFocused: boolean\n}\n\nexport class NumberInput extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  private inputRef = React.createRef<HTMLInputElement | HTMLTextAreaElement>()\n\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      dirty: false,\n      value: this.initialValue,\n      formattedValue: this.formatValue(this.initialValue),\n      isFocused: false,\n    }\n  }\n\n  get initialValue(): number | null {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf\n    const storedValue = this.isIntData()\n      ? this.props.widgetMgr.getIntValue(this.props.element)\n      : this.props.widgetMgr.getDoubleValue(this.props.element)\n\n    return storedValue ?? this.props.element.default ?? null\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState(\n      {\n        value: value ?? null,\n        formattedValue: this.formatValue(value ?? null),\n      },\n      () => {\n        this.commitWidgetValue({ fromUi: false })\n      }\n    )\n  }\n\n  private formatValue = (value: number | null): string | null => {\n    if (isNullOrUndefined(value)) {\n      return null\n    }\n\n    const format = getNonEmptyString(this.props.element.format)\n    if (format == null) {\n      return value.toString()\n    }\n\n    try {\n      return sprintf(format, value)\n    } catch (e) {\n      // Don't explode if we have a malformed format string.\n      logWarning(`Error in sprintf(${format}, ${value}): ${e}`)\n      return String(value)\n    }\n  }\n\n  private isIntData = (): boolean => {\n    return this.props.element.dataType === NumberInputProto.DataType.INT\n  }\n\n  private getMin = (): number => {\n    return this.props.element.hasMin ? this.props.element.min : -Infinity\n  }\n\n  private getMax = (): number => {\n    return this.props.element.hasMax ? this.props.element.max : +Infinity\n  }\n\n  private getStep = (): number => {\n    const { step } = this.props.element\n\n    if (step) {\n      return step\n    }\n    if (this.isIntData()) {\n      return 1\n    }\n    return 0.01\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    const { value } = this.state\n    const { element, widgetMgr } = this.props\n    const data = this.props.element\n\n    const min = this.getMin()\n    const max = this.getMax()\n\n    if (notNullOrUndefined(value) && (min > value || value > max)) {\n      const node = this.inputRef.current\n      if (node) {\n        node.reportValidity()\n      }\n    } else {\n      const valueToBeSaved = value ?? data.default ?? null\n\n      if (this.isIntData()) {\n        widgetMgr.setIntValue(element, valueToBeSaved, source)\n      } else {\n        widgetMgr.setDoubleValue(element, valueToBeSaved, source)\n      }\n\n      this.setState({\n        dirty: false,\n        value: valueToBeSaved,\n        formattedValue: this.formatValue(valueToBeSaved),\n      })\n    }\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState(\n      (_, prevProps) => {\n        return { value: prevProps.element.default ?? null }\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private onBlur = (): void => {\n    if (this.state.dirty) {\n      this.commitWidgetValue({ fromUi: true })\n    }\n\n    this.setState({ isFocused: false })\n  }\n\n  private onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private onChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void => {\n    const { value } = e.target\n\n    if (value === \"\") {\n      this.setState({\n        dirty: true,\n        value: null,\n        formattedValue: null,\n      })\n    } else {\n      let numValue: number\n\n      if (this.isIntData()) {\n        numValue = parseInt(value, 10)\n      } else {\n        numValue = parseFloat(value)\n      }\n\n      this.setState({\n        dirty: true,\n        value: numValue,\n        formattedValue: value,\n      })\n    }\n  }\n\n  private onKeyDown = (\n    e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void => {\n    const { key } = e\n\n    switch (key) {\n      case \"ArrowUp\":\n        e.preventDefault()\n\n        this.modifyValueUsingStep(\"increment\")()\n        break\n      case \"ArrowDown\":\n        e.preventDefault()\n\n        this.modifyValueUsingStep(\"decrement\")()\n        break\n      default: // Do nothing\n    }\n  }\n\n  private onKeyPress = (\n    e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void => {\n    if (e.key === \"Enter\") {\n      if (this.state.dirty) {\n        this.commitWidgetValue({ fromUi: true })\n      }\n      if (isInForm(this.props.element)) {\n        this.props.widgetMgr.submitForm(this.props.element.formId)\n      }\n    }\n  }\n\n  /** True if the input's current value can be decremented by its step. */\n  private get canDecrement(): boolean {\n    if (isNullOrUndefined(this.state.value)) {\n      return false\n    }\n\n    return this.state.value - this.getStep() >= this.getMin()\n  }\n\n  /** True if the input's current value can be incremented by its step. */\n  private get canIncrement(): boolean {\n    if (isNullOrUndefined(this.state.value)) {\n      return false\n    }\n\n    return this.state.value + this.getStep() <= this.getMax()\n  }\n\n  private modifyValueUsingStep =\n    (modifier: \"increment\" | \"decrement\"): any =>\n    (): void => {\n      const { value } = this.state\n      const step = this.getStep()\n\n      switch (modifier) {\n        case \"increment\":\n          if (this.canIncrement) {\n            this.setState(\n              {\n                dirty: true,\n                value: (value ?? this.getMin()) + step,\n              },\n              () => {\n                this.commitWidgetValue({ fromUi: true })\n              }\n            )\n          }\n          break\n        case \"decrement\":\n          if (this.canDecrement) {\n            this.setState(\n              {\n                dirty: true,\n                value: (value ?? this.getMax()) - step,\n              },\n              () => {\n                this.commitWidgetValue({ fromUi: true })\n              }\n            )\n          }\n          break\n        default: // Do nothing\n      }\n    }\n\n  public render(): React.ReactNode {\n    const { element, width, disabled, widgetMgr, theme } = this.props\n    const { formattedValue, dirty, isFocused } = this.state\n\n    const style = { width }\n\n    const disableDecrement = !this.canDecrement || disabled\n    const disableIncrement = !this.canIncrement || disabled\n    const clearable = isNullOrUndefined(element.default) && !disabled\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <div className=\"stNumberInput\" style={style} data-testid=\"stNumberInput\">\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <StyledInputContainer\n          className={isFocused ? \"focused\" : \"\"}\n          data-testid=\"stNumberInputContainer\"\n        >\n          <UIInput\n            type=\"number\"\n            inputRef={this.inputRef}\n            value={formattedValue ?? \"\"}\n            placeholder={element.placeholder}\n            onBlur={this.onBlur}\n            onFocus={this.onFocus}\n            onChange={this.onChange}\n            onKeyPress={this.onKeyPress}\n            onKeyDown={this.onKeyDown}\n            clearable={clearable}\n            clearOnEscape={clearable}\n            disabled={disabled}\n            aria-label={element.label}\n            overrides={{\n              ClearIcon: {\n                props: {\n                  overrides: {\n                    Svg: {\n                      style: {\n                        color: theme.colors.darkGray,\n                        // Since the close icon is an SVG, and we can't control its viewbox nor its attributes,\n                        // Let's use a scale transform effect to make it bigger.\n                        // The width property only enlarges its bounding box, so it's easier to click.\n                        transform: \"scale(1.4)\",\n                        width: theme.spacing.twoXL,\n                        marginRight: \"-1.25em\",\n\n                        \":hover\": {\n                          fill: theme.colors.bodyText,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n              Input: {\n                props: {\n                  \"data-testid\": \"stNumberInput-Input\",\n                  step: this.getStep(),\n                  min: this.getMin(),\n                  max: this.getMax(),\n                },\n                style: {\n                  lineHeight: \"1.4\",\n                  // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                  paddingRight: \".5rem\",\n                  paddingLeft: \".5rem\",\n                  paddingBottom: \".5rem\",\n                  paddingTop: \".5rem\",\n                },\n              },\n              InputContainer: {\n                style: () => ({\n                  borderTopRightRadius: 0,\n                  borderBottomRightRadius: 0,\n                }),\n              },\n              Root: {\n                style: () => ({\n                  borderTopRightRadius: 0,\n                  borderBottomRightRadius: 0,\n                  // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                  borderLeftWidth: 0,\n                  borderRightWidth: 0,\n                  borderTopWidth: 0,\n                  borderBottomWidth: 0,\n                }),\n              },\n            }}\n          />\n\n          {/* We only want to show the increment/decrement controls when there is sufficient room to display the value and these controls. */}\n          {width > breakpoints.hideNumberInputControls && (\n            <StyledInputControls>\n              <StyledInputControl\n                className=\"step-down\"\n                data-testid=\"stNumberInput-StepDown\"\n                onClick={this.modifyValueUsingStep(\"decrement\")}\n                disabled={disableDecrement}\n                tabIndex={-1}\n              >\n                <Icon\n                  content={Minus}\n                  size=\"xs\"\n                  color={this.canDecrement ? \"inherit\" : \"disabled\"}\n                />\n              </StyledInputControl>\n              <StyledInputControl\n                className=\"step-up\"\n                data-testid=\"stNumberInput-StepUp\"\n                onClick={this.modifyValueUsingStep(\"increment\")}\n                disabled={disableIncrement}\n                tabIndex={-1}\n              >\n                <Icon\n                  content={Plus}\n                  size=\"xs\"\n                  color={this.canIncrement ? \"inherit\" : \"disabled\"}\n                />\n              </StyledInputControl>\n            </StyledInputControls>\n          )}\n        </StyledInputContainer>\n        {/* Hide the \"Please enter to apply\" text in small widget sizes */}\n        {width > breakpoints.hideWidgetDetails && (\n          <StyledInstructionsContainer clearable={clearable}>\n            <InputInstructions\n              dirty={dirty}\n              value={formattedValue ?? \"\"}\n              className=\"input-instructions\"\n              inForm={isInForm({ formId: element.formId })}\n            />\n          </StyledInstructionsContainer>\n        )}\n      </div>\n    )\n  }\n}\n\n/**\n * Return a string property from an element. If the string is\n * null or empty, return undefined instead.\n */\nfunction getNonEmptyString(\n  value: string | null | undefined\n): string | undefined {\n  return value == null || value === \"\" ? undefined : value\n}\n\nexport default withTheme(NumberInput)\n"],"names":["blink","keyframes","_templateObject","StyledMessage","_styled","target","_ref","includeDot","shouldBlink","theme","opacity","content","animation","color","colors","gray","margin","red","animationName","concat","animationDuration","animationIterationCount","dirty","value","maxLength","className","type","inForm","messages","addMessage","text","arguments","length","undefined","push","_jsx","children","toSubmitFormOrApplyText","commandKey","isFromMac","StyledWidgetInstructions","FormClearHelper","constructor","formClearListener","lastWidgetMgr","lastFormId","manageFormClearListener","widgetMgr","formId","listener","this","disconnect","isValidFormId","addFormClearedListener","_this$formClearListen","StyledInputContainer","display","flexDirection","flexWrap","alignItems","borderWidth","borderStyle","borderColor","widgetBorderColor","widgetBackgroundColor","bgColor","transitionDuration","transitionProperty","transitionTimingFunction","borderRadius","radii","lg","overflow","primary","input","MozAppearance","WebkitAppearance","spacing","none","StyledInputControls","name","styles","StyledInputControl","_ref2","border","height","sizes","full","width","justifyContent","bodyText","transition","backgroundColor","secondaryBg","white","outline","borderTopRightRadius","borderBottomRightRadius","cursor","fadedText40","StyledInstructionsContainer","_ref3","clearable","position","marginRight","twoXS","left","right","CONTROLS_WIDTH","NumberInput","React","props","super","formClearHelper","inputRef","formatValue","isNullOrUndefined","format","getNonEmptyString","element","toString","sprintf","e","logWarning","String","isIntData","dataType","NumberInputProto","DataType","INT","getMin","hasMin","min","Infinity","getMax","hasMax","max","getStep","step","commitWidgetValue","source","state","data","notNullOrUndefined","node","current","reportValidity","valueToBeSaved","default","setIntValue","setDoubleValue","setState","formattedValue","onFormCleared","_","prevProps","_prevProps$element$de","fromUi","onBlur","isFocused","onFocus","onChange","numValue","parseInt","parseFloat","onKeyDown","key","preventDefault","modifyValueUsingStep","onKeyPress","isInForm","submitForm","modifier","canIncrement","canDecrement","initialValue","storedValue","getIntValue","getDoubleValue","componentDidMount","setValue","updateFromProtobuf","componentDidUpdate","maybeUpdateFromProtobuf","componentWillUnmount","render","_element$labelVisibil","disabled","style","disableDecrement","disableIncrement","_jsxs","WidgetLabel","label","labelVisibility","labelVisibilityProtoValueToEnum","help","StyledWidgetLabelHelp","TooltipIcon","placement","Placement","TOP_RIGHT","UIInput","placeholder","clearOnEscape","overrides","ClearIcon","Svg","darkGray","transform","twoXL","fill","Input","lineHeight","paddingRight","paddingLeft","paddingBottom","paddingTop","InputContainer","Root","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","breakpoints","hideNumberInputControls","onClick","tabIndex","Icon","Minus","size","Plus","hideWidgetDetails","InputInstructions","withTheme"],"sourceRoot":""}