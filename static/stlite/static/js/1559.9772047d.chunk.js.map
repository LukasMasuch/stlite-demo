{"version":3,"file":"static/js/1559.9772047d.chunk.js","mappings":"+KAqBA,MAAMA,EAAiB,IAQR,SAASC,EAAKC,GAIC,IAJA,QAC5BC,EAAO,MACPC,EAAK,UACLC,GACWH,EACX,MAAMI,GAAWC,EAAAA,EAAAA,QAAyB,OAGpC,KAAEC,EAAMC,IAAKC,EAAM,UAAEC,GAAcR,EACnCM,GAAMG,EAAAA,EAAAA,IAAwBF,IAGpCG,EAAAA,EAAAA,YAAU,KACJP,EAASQ,UACXR,EAASQ,QAAQC,YAAcJ,EACjC,GACC,CAACA,KAEJE,EAAAA,EAAAA,YAAU,KACR,MAAMG,EAAYV,EAASQ,QAErBG,EAA2BA,KAC3BD,IAEFA,EAAUD,YAAcZ,EAAQQ,UAClC,EAOF,OAJIK,GACFA,EAAUE,iBAAiB,iBAAkBD,GAGxC,KACDD,GACFA,EAAUG,oBAAoB,iBAAkBF,EAClD,CACD,GACA,CAACd,IAEJ,MAAMiB,EAAiBX,IACrB,MAAM,UAAEE,GAAcR,EACtB,OAAIQ,EACI,GAANU,OAAUZ,EAAG,WAAAY,OAAUV,GAElBF,CAAG,EAMZ,GAAID,IAASc,EAAAA,GAAWC,KAAKC,eAAgB,CAO3C,MAAMC,EAAmB,IAAVrB,EAAsB,IAARA,EAAeJ,EAE5C,OACE0B,EAAAA,EAAAA,KAAA,UACE,cAAY,UACZC,MAAOlB,EACPmB,IAAKR,EAAcX,GACnBL,MAAOA,EACPqB,OAAQA,EACRI,YAAY,IACZC,MAAM,4BACNC,iBAAe,GAGrB,CAEA,OACEL,EAAAA,EAAAA,KAAA,SACE,cAAY,UACZM,IAAK1B,EACL2B,UAAQ,EACRL,IAAKvB,EAAU6B,cAAczB,GAC7B0B,UAAU,UACVC,MAAO,CAAEhC,QAAOqB,OAAkB,IAAVrB,EAAcJ,OAAiBqC,IAG7D,C","sources":["../../../streamlit/frontend/lib/src/components/elements/Video/Video.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useEffect, useRef } from \"react\"\nimport { Video as VideoProto } from \"@streamlit/lib/src/proto\"\nimport { StreamlitEndpoints } from \"@streamlit/lib/src/StreamlitEndpoints\"\nimport { useStliteMediaObjectUrl } from \"@stlite/kernel\"\n\nconst DEFAULT_HEIGHT = 528\n\nexport interface VideoProps {\n  endpoints: StreamlitEndpoints\n  width: number\n  element: VideoProto\n}\n\nexport default function Video({\n  element,\n  width,\n  endpoints,\n}: VideoProps): ReactElement {\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  /* Element may contain \"url\" or \"data\" property. */\n  const { type, url: rawUrl, startTime } = element\n  const url = useStliteMediaObjectUrl(rawUrl)\n\n  // Handle startTime changes\n  useEffect(() => {\n    if (videoRef.current) {\n      videoRef.current.currentTime = startTime\n    }\n  }, [startTime])\n\n  useEffect(() => {\n    const videoNode = videoRef.current\n\n    const setStartTime: () => void = () => {\n      if (videoNode) {\n        // setStartTime\n        videoNode.currentTime = element.startTime\n      }\n    }\n\n    if (videoNode) {\n      videoNode.addEventListener(\"loadedmetadata\", setStartTime)\n    }\n\n    return () => {\n      if (videoNode) {\n        videoNode.removeEventListener(\"loadedmetadata\", setStartTime)\n      }\n    }\n  }, [element])\n\n  const getYoutubeSrc = (url: string): string => {\n    const { startTime } = element\n    if (startTime) {\n      return `${url}?start=${startTime}`\n    }\n    return url\n  }\n\n  /* Is this a YouTube link? If so we need a fancier tag.\n       NOTE: This part assumes the URL is already an \"embed\" link.\n    */\n  if (type === VideoProto.Type.YOUTUBE_IFRAME) {\n    // At some point the width 0 will be passed to this component\n    // which is caused by the AutoSizer of the VerticalLayout\n    // Width 0 will result in height being 0, which results in issue\n    // https://github.com/streamlit/streamlit/issues/5069\n    // To avoid this, when we detect width is 0, we set height to 528,\n    // which is default height based on the default streamlit width\n    const height = width !== 0 ? width * 0.75 : DEFAULT_HEIGHT\n\n    return (\n      <iframe\n        data-testid=\"stVideo\"\n        title={url}\n        src={getYoutubeSrc(url)}\n        width={width}\n        height={height}\n        frameBorder=\"0\"\n        allow=\"autoplay; encrypted-media\"\n        allowFullScreen\n      />\n    )\n  }\n\n  return (\n    <video\n      data-testid=\"stVideo\"\n      ref={videoRef}\n      controls\n      src={endpoints.buildMediaURL(url)}\n      className=\"stVideo\"\n      style={{ width, height: width === 0 ? DEFAULT_HEIGHT : undefined }}\n    />\n  )\n}\n"],"names":["DEFAULT_HEIGHT","Video","_ref","element","width","endpoints","videoRef","useRef","type","url","rawUrl","startTime","useStliteMediaObjectUrl","useEffect","current","currentTime","videoNode","setStartTime","addEventListener","removeEventListener","getYoutubeSrc","concat","VideoProto","Type","YOUTUBE_IFRAME","height","_jsx","title","src","frameBorder","allow","allowFullScreen","ref","controls","buildMediaURL","className","style","undefined"],"sourceRoot":""}